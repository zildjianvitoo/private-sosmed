// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  displayName   String    @map("display_name")
  name          String?
  handle        String?   @unique
  image         String?
  bio           String?
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  sentRequests     FriendRequest[] @relation("sent_requests")
  receivedRequests FriendRequest[] @relation("received_requests")
  friendshipsA     Friendship[]    @relation("friend_a")
  friendshipsB     Friendship[]    @relation("friend_b")
}

model FriendRequest {
  id          String   @id @default(cuid())
  requesterId String   @map("requester_id")
  recipientId String   @map("recipient_id")
  status      String   @default("PENDING")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  requester User @relation("sent_requests", fields: [requesterId], references: [id], onDelete: Cascade)
  recipient User @relation("received_requests", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([requesterId, recipientId])
  @@index([recipientId], map: "FriendRequest_recipient_idx")
  @@index([requesterId], map: "FriendRequest_requester_idx")
  @@index([requesterId, status])
}

model Friendship {
  id        String   @id @default(cuid())
  userAId   String   @map("user_a_id")
  userBId   String   @map("user_b_id")
  createdAt DateTime @default(now()) @map("created_at")

  userA User @relation("friend_a", fields: [userAId], references: [id], onDelete: Cascade)
  userB User @relation("friend_b", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
  @@index([userAId])
  @@index([userBId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
